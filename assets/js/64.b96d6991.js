(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{491:function(e,t,o){"use strict";o.r(t);var _=o(14),v=Object(_.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"첫-번째-메이저-버전-22-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#첫-번째-메이저-버전-22-0"}},[e._v("#")]),e._v(" 첫 번째 메이저 버전! (22.0)")]),e._v(" "),t("p",[e._v("이번 업데이트에는 몇 가지 내용이 있습니다. 우선, 모든 셰이더 관련 구성 구조체(config struct)에 "),t("code",[e._v("compilation_options")]),e._v(" 필드가 추가되었습니다. 현재로서는 "),t("code",[e._v("Default::default()")]),e._v("로 남겨두었지만, 특별한 컴파일 요구사항이 있다면 이 필드를 사용하시면 됩니다.")]),e._v(" "),t("p",[e._v("다음으로, "),t("code",[e._v("RenderPipelineDescriptor")]),e._v("와 "),t("code",[e._v("ComputePipelineDescriptor")]),e._v("에 "),t("code",[e._v("cache")]),e._v(" 필드가 추가되었습니다. 이 필드를 통해 셰이더 컴파일 중에 사용할 캐시를 제공할 수 있습니다. 대부분의 데스크톱 하드웨어/드라이버는 자체적으로 캐싱을 제공하므로, 이 기능은 안드로이드 기기에서 특히 유용합니다. 이 값은 일단 "),t("code",[e._v("None")]),e._v("으로 남겨두었습니다.")]),e._v(" "),t("p",[t("code",[e._v("DeviceDescriptor")]),e._v("에는 "),t("code",[e._v("memory_hint")]),e._v(" 필드가 추가되었습니다. 이 필드를 사용하여 GPU에 성능이나 메모리 사용량을 우선시하도록 요청하거나, 커스텀 메모리 블록 크기를 지정할 수 있습니다. 하지만 이것들은 힌트(hint)일 뿐이며, 실제 동작 방식에 대한 최종 결정은 하드웨어가 내립니다. 이 값 또한 현재는 "),t("code",[e._v("Default::default()")]),e._v("로 남겨두었습니다.")])])}),[],!1,null,null,null);t.default=v.exports}}]);